{"version":3,"sources":["runner/index.tsx","utils/marina.ts","components/TestView.tsx","components/TestRunner.tsx","api-tests.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["testRunner","tests","before","a","result","fail","success","test","runTest","testResult","error","undefined","function","message","name","getMarina","i","window","marina","Promise","resolve","setTimeout","Error","successIcon","xmlns","className","fill","viewBox","stroke","strokeLinecap","strokeLinejoin","strokeWidth","d","failIcon","fillRule","clipRule","TestView","index","classNames","Runner","useState","results","setResults","isLoading","setIsLoading","marinaIsLoading","setMarinaIsLoading","errorMsg","setErrorMsg","isEnabled","enable","console","runTests","r","concat","views","map","onClick","disabled","assert","strictEqual","getNetwork","network","getAddresses","addrs","getNextAddress","nextAddr","includes","getNextChangeAddress","addr","changeAddr","confidentialAddress","getCoins","coins","Array","isArray","getTransactions","txs","getBalances","balances","id","on","idBis","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c17c320f.chunk.js","sourcesContent":["import { RunnerResult, Test, TestResult } from \"./types\";\n\n/**\n * Async generator running test.\n * yield the test results.\n * return the Runner result at the end.\n * @param tests an array of tests\n */\nexport async function* testRunner(tests: Test[], before: () => Promise<void>) {\n  const result: RunnerResult = {\n    fail: 0,\n    success: 0,\n  };\n\n  await before();\n\n  for (const test of tests) {\n    const testResult = await runTest(test);\n\n    if (testResult.success) {\n      result.success = result.success + 1;\n    } else {\n      result.fail = result.fail + 1;\n    }\n\n    yield testResult;\n  }\n\n  return result;\n}\n\nasync function runTest(test: Test): Promise<TestResult> {\n  let error = undefined;\n  let success = true;\n\n  try {\n    await test.function();\n  } catch (e) {\n    error = e.message;\n    success = false;\n  }\n\n  return { name: test.name, error, success };\n}\n","import { MarinaProvider } from 'marina-provider';\n\nconst MAX_TRY = 60;\nconst INTERVAL_MS = 1000;\n\nexport async function getMarina(): Promise<MarinaProvider> {\n\tfor (let i = 0; i < MAX_TRY; i++) {\n\t\tconst isInstalled = typeof (window as any).marina !== \"undefined\";\n\t\tif (!isInstalled) {\n\t\t\tawait new Promise<void>((resolve) => setTimeout(() => resolve(), INTERVAL_MS))\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst marina: MarinaProvider = (window as any).marina;\n\t\treturn marina;\n\t}\n\n\tthrow new Error(\"Marina needs to be installed\");\n}","import classNames from \"classnames\";\nimport React from \"react\";\nimport { TestResult } from \"../runner/types\";\n\nconst successIcon = (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    className=\"h-6 w-6\"\n    fill=\"none\"\n    viewBox=\"0 0 24 24\"\n    stroke=\"white\"\n  >\n    <path\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth={2}\n      d=\"M5 13l4 4L19 7\"\n    />\n  </svg>\n);\n\nconst failIcon = (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    className=\"h-5 w-5\"\n    viewBox=\"0 0 20 20\"\n    fill=\"white\"\n  >\n    <path\n      fillRule=\"evenodd\"\n      d=\"M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z\"\n      clipRule=\"evenodd\"\n    />\n  </svg>\n);\n\nconst TestView: React.FC<TestResult & { index: number }> = ({\n  name,\n  error,\n  success,\n  index,\n}) => {\n  return (\n    <div\n      className={classNames(\n        \"mb-2 w-106 flex flex-row justify-between m-auto bg-gradient-to-r  p-6 gap-8 rounded-lg border-2 \",\n        {\n          \"from-green-700 via-green-800 to-green-900 border-green-500\": success,\n        },\n        {\n          \"from-red-700 via-red-800 to-red-900 border-red-500\": !success,\n        }\n      )}\n    >\n      <div className=\"text-left my-auto\">\n        <div className=\"text-lg text-white-500 font-light\">{name}</div>\n        {!success && (\n          <div className=\"mt-1\">\n            <div className=\"text-sm text-purple-100 font-bold\">Error:</div>\n            <div className=\"text-xs text-purple-100\">{error}</div>\n          </div>\n        )}\n      </div>\n      {success ? successIcon : failIcon}\n    </div>\n  );\n};\n\nexport default TestView;\n","import { useState } from \"react\";\nimport { testRunner } from \"../runner\";\nimport { Test, TestResult } from \"../runner/types\";\nimport { getMarina } from \"../utils/marina\";\nimport TestView from \"./TestView\";\n\nexport interface RunnerProps {\n  tests: Test[];\n}\n\nconst Runner: React.FC<RunnerProps> = ({ tests }) => {\n  const [results, setResults] = useState<TestResult[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const [marinaIsLoading, setMarinaIsLoading] = useState(false);\n  const [errorMsg, setErrorMsg] = useState(undefined);\n\n  const before = async () => {\n    try {\n      setMarinaIsLoading(true);\n      const marina = await getMarina();\n      const isEnabled = await marina.isEnabled();\n      if (!isEnabled) {\n        await marina.enable();\n      }\n    } catch (err) {\n      console.error(err);\n      setErrorMsg(err.message || err);\n    } finally {\n      setMarinaIsLoading(false);\n    }\n  };\n\n  const runTests = async () => {\n    if (isLoading || marinaIsLoading) return;\n    setErrorMsg(undefined);\n    setIsLoading(true);\n    try {\n      setResults([]);\n      for await (const testResult of testRunner(tests, before)) {\n        setResults((r) => r.concat([testResult]));\n      }\n    } catch (e) {\n      console.error(e);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const views = results.map((result, index) => (\n    <span className={result.success ? \"success\" : \"error\"}>\n      <TestView key={index} index={index} {...result} />\n    </span>\n  ));\n\n  return (\n    <div className=\"flex flex-row-reverse justify-between\">\n      <div>\n        <div className=\"flex flex-col-reverse\">\n          {isLoading && (\n            <span className=\"text-sm text-center m-2 pb-3 animate-pulse\">\n              tests are loading...\n            </span>\n          )}\n          {marinaIsLoading && (\n            <span className=\"text-sm text-center m-2 pb-3 animate-pulse\">\n              Trying to access your Marina...\n            </span>\n          )}\n          {errorMsg && (\n            <span className=\"text-sm text-center m-2 pb-3\">{errorMsg}</span>\n          )}\n          <button\n            className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded mr-3\"\n            onClick={runTests}\n            disabled={isLoading}\n          >\n            RUN\n          </button>\n        </div>\n      </div>\n      <div className=\"ml-3\">{views}</div>\n    </div>\n  );\n};\n\nexport default Runner;\n","import { Test } from \"./runner/types\";\nimport * as assert from 'assert';\nimport { MarinaEventType } from \"marina-provider\";\nimport { getMarina } from \"./utils/marina\";\n\n\nconst tests: Test[] = [\n\t// isEnabled\n\t{\n\t\tname: 'isEnabled should return true',\n\t\tfunction: async () => {\n\t\t\tconst marina = await getMarina();\n\t\t\tassert.strictEqual(await marina.isEnabled(), true);\n\t\t}\n\t},\n\t// enable\n\t{\n\t\tname: 'enable should throw an error',\n\t\tfunction: async () => {\n\t\t\ttry {\n\t\t\t\tconst marina = await getMarina();\n\t\t\t\tawait marina.enable()\n\t\t\t} catch {\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tthrow new Error('enable() do not throw any errors')\n\t\t}\n\t},\n\t// getNetwork\n\t{\n\t\tname: 'getNetwork should return \"liquid\" or \"regtest\"',\n\t\tfunction: async () => {\n\t\t\tconst marina = await getMarina();\n\t\t\tconst network = await marina.getNetwork();\n\t\t\tif (network === 'liquid' || network === 'regtest') return;\n\t\t\tthrow new Error('network value is invalid')\n\t\t}\n\t},\n\t// getNextAddress\n\t{\n\t\tname: 'getNextAddress should generate a new address',\n\t\tfunction: async () => {\n\t\t\tconst marina = await getMarina();\n\t\t\tconst addrs = await marina.getAddresses();\n\t\t\tconst nextAddr = await marina.getNextAddress();\n\n\t\t\tif (addrs.includes(nextAddr)) {\n\t\t\t\tthrow new Error('next address already included in adddresses array')\n\t\t\t}\n\t\t}\n\t},\n\t// getNextChangeAddress\n\t{\n\t\tname: 'getNextChangeAddress should generate a new change address',\n\t\tfunction: async () => {\n\t\t\tconst marina = await getMarina();\n\t\t\tconst addrs = await marina.getAddresses();\n\t\t\tconst nextAddr = await marina.getNextChangeAddress();\n\n\t\t\tif (addrs.includes(nextAddr)) {\n\t\t\t\tthrow new Error('next address already included in adddresses array')\n\t\t\t}\n\t\t}\n\t},\n\t// getAddresses\n\t{\n\t\tname: 'getAddresses should return generated addresses',\n\t\tfunction: async () => {\n\t\t\tconst marina = await getMarina();\n\t\t\tconst addr = await marina.getNextAddress();\n\t\t\tconst changeAddr = await marina.getNextChangeAddress();\n\t\t\tconst addrs = await marina.getAddresses();\n\n\t\t\tif (!addrs.map(a => a.confidentialAddress).includes(addr.confidentialAddress))\n\t\t\t\tthrow new Error('getAddresses does not return the next address');\n\n\t\t\tif (!addrs.map(a => a.confidentialAddress).includes(changeAddr.confidentialAddress))\n\t\t\t\tthrow new Error('getAddresses does not return the next change address');\n\t\t}\n\t},\n\t// getCoins\n\t{\n\t\tname: 'getCoins should return an array',\n\t\tfunction: async () => {\n\t\t\tconst marina = await getMarina();\n\t\t\tconst coins = await marina.getCoins();\n\t\t\tif (Array.isArray(coins)) return;\n\t\t\tthrow new Error('do not return an array')\n\t\t},\n\t},\n\t// getTransactions\n\t{\n\t\tname: 'getTransactions should return an array',\n\t\tfunction: async () => {\n\t\t\tconst marina = await getMarina();\n\t\t\tconst txs = await marina.getTransactions();\n\t\t\tif (Array.isArray(txs)) return;\n\t\t\tthrow new Error('do not return an array')\n\t\t}\n\t},\n\t// getBalances \n\t{\n\t\tname: 'getBalances should return an array',\n\t\tfunction: async () => {\n\t\t\tconst marina = await getMarina();\n\t\t\tconst balances = await marina.getBalances();\n\t\t\tif (Array.isArray(balances)) return;\n\t\t\tthrow new Error('do not return an array')\n\t\t}\n\t},\n\t// on/off \n\t{\n\t\tname: 'on() should return random event id',\n\t\tfunction: async () => {\n\t\t\tconst marina = await getMarina();\n\t\t\tconst id = marina.on('DISABLED', () => '')\n\t\t\tconst idBis = marina.on('DISABLED', () => '')\n\t\t\tassert.notDeepStrictEqual(id, idBis);\n\t\t},\n\t},\n\t{\n\t\tname: 'on() should throw an error with invalid event type name',\n\t\tfunction: async () => {\n\t\t\tconst marina = await getMarina();\n\t\t\tconst id = marina.on('DISABLED', () => '')\n\t\t\tconst idBis = marina.on('DISABLED', () => '')\n\n\t\t\tassert.throws(() => {\n\t\t\t\tmarina.on('notamarinaeventType' as MarinaEventType, () => '');\n\t\t\t})\n\n\t\t\tassert.notDeepStrictEqual(id, idBis);\n\t\t},\n\t},\n]\n\nexport default tests;","import React from \"react\";\n\nimport Runner from \"./components/TestRunner\";\nimport tests from \"./api-tests\";\n\nfunction App() {\n  return (\n    <div className=\"App m-5\">\n      <Runner tests={tests} />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}